- name: Installing maven
  ansible.builtin.dnf:
    name: maven
    state: present

- name: creating app user for {{ component }}
  ansible.builtin.user:
    name: "{{ app_user }}"

- name: cleanup old {{ component }} content
  ansible.builtin.file: 
    path: "{{ app_path }}"
    state: absent 
  ignore_errors: true

- name: Creating {{ component }} app directory
  ansible.builtin.file: 
    path: "{{ app_path }}"
    state: directory 

- name: Downloading and extracting {{ component }} content
  ansible.builtin.unarchive:
    src: "{{ url }}"
    dest: "{{ app_path }}"
    remote_src: yes

- name: Generating artifacts
  ansible.builtin.shell: mvn clean package ; mv target/{{ component }}-1.0.jar {{ component }}.jar
  args:
    chdir: "{{ app_path }}"

- name: Installing mysql shell
  ansible.builtin.dnf:
    name: mysql
    state: present

- name: Injecting schema 
  ansible.builtin.shell: mysql -h mysql-{{ env }}.clouding-app.shop -uroot -pRoboShop@1 < /app/db/schema.sql

- name: Injecting App user schema 
  ansible.builtin.shell: mysql -h mysql-{{ env }}.clouding-app.shop -uroot -pRoboShop@1 < /app/db/app-user.sql

- name: Injecting Master schema 
  ansible.builtin.shell: mysql -h mysql-{{ env }}.clouding-app.shop -uroot -pRoboShop@1 < /app/db/master-data.sql

- name: Configuring systemd
  ansible.builtin.template:
    src: "{{ component }}.service"
    dest: /etc/systemd/system/{{ component }}.service

- name: Restarting {{ component }} service
  ansible.builtin.systemd_service:
    state: restarted
    daemon_reload: true
    name: "{{ component }}"
    enabled: true

- name: Configuring hostname for {{ component }}
  ansible.builtin.shell: set-hostname {{ component }}-{{ env }}